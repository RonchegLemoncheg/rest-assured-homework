package localhost.client.model;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link AuthenticationRequest} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractAuthenticationRequestAssert<S extends AbstractAuthenticationRequestAssert<S, A>, A extends AuthenticationRequest> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractAuthenticationRequestAssert}</code> to make assertions on actual AuthenticationRequest.
   * @param actual the AuthenticationRequest we want to make assertions on.
   */
  protected AbstractAuthenticationRequestAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual AuthenticationRequest's email is equal to the given one.
   * @param email the given email to compare the actual AuthenticationRequest's email to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AuthenticationRequest's email is not equal to the given one.
   */
  public S hasEmail(String email) {
    // check that actual AuthenticationRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting email of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualEmail = actual.getEmail();
    if (!Objects.areEqual(actualEmail, email)) {
      failWithMessage(assertjErrorMessage, actual, email, actualEmail);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual AuthenticationRequest's password is equal to the given one.
   * @param password the given password to compare the actual AuthenticationRequest's password to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AuthenticationRequest's password is not equal to the given one.
   */
  public S hasPassword(String password) {
    // check that actual AuthenticationRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting password of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualPassword = actual.getPassword();
    if (!Objects.areEqual(actualPassword, password)) {
      failWithMessage(assertjErrorMessage, actual, password, actualPassword);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
