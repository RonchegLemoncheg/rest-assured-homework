package localhost.client.model;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link RegisterRequest} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractRegisterRequestAssert<S extends AbstractRegisterRequestAssert<S, A>, A extends RegisterRequest> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractRegisterRequestAssert}</code> to make assertions on actual RegisterRequest.
   * @param actual the RegisterRequest we want to make assertions on.
   */
  protected AbstractRegisterRequestAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual RegisterRequest's email is equal to the given one.
   * @param email the given email to compare the actual RegisterRequest's email to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RegisterRequest's email is not equal to the given one.
   */
  public S hasEmail(String email) {
    // check that actual RegisterRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting email of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualEmail = actual.getEmail();
    if (!Objects.areEqual(actualEmail, email)) {
      failWithMessage(assertjErrorMessage, actual, email, actualEmail);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RegisterRequest's firstname is equal to the given one.
   * @param firstname the given firstname to compare the actual RegisterRequest's firstname to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RegisterRequest's firstname is not equal to the given one.
   */
  public S hasFirstname(String firstname) {
    // check that actual RegisterRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting firstname of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualFirstname = actual.getFirstname();
    if (!Objects.areEqual(actualFirstname, firstname)) {
      failWithMessage(assertjErrorMessage, actual, firstname, actualFirstname);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RegisterRequest's lastname is equal to the given one.
   * @param lastname the given lastname to compare the actual RegisterRequest's lastname to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RegisterRequest's lastname is not equal to the given one.
   */
  public S hasLastname(String lastname) {
    // check that actual RegisterRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting lastname of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualLastname = actual.getLastname();
    if (!Objects.areEqual(actualLastname, lastname)) {
      failWithMessage(assertjErrorMessage, actual, lastname, actualLastname);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RegisterRequest's password is equal to the given one.
   * @param password the given password to compare the actual RegisterRequest's password to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RegisterRequest's password is not equal to the given one.
   */
  public S hasPassword(String password) {
    // check that actual RegisterRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting password of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualPassword = actual.getPassword();
    if (!Objects.areEqual(actualPassword, password)) {
      failWithMessage(assertjErrorMessage, actual, password, actualPassword);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RegisterRequest's role is equal to the given one.
   * @param role the given role to compare the actual RegisterRequest's role to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RegisterRequest's role is not equal to the given one.
   */
  public S hasRole(RegisterRequest.RoleEnum role) {
    // check that actual RegisterRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting role of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    RegisterRequest.RoleEnum actualRole = actual.getRole();
    if (!Objects.areEqual(actualRole, role)) {
      failWithMessage(assertjErrorMessage, actual, role, actualRole);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
