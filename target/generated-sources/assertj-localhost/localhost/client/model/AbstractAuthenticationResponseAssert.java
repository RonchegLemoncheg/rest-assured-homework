package localhost.client.model;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link AuthenticationResponse} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractAuthenticationResponseAssert<S extends AbstractAuthenticationResponseAssert<S, A>, A extends AuthenticationResponse> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractAuthenticationResponseAssert}</code> to make assertions on actual AuthenticationResponse.
   * @param actual the AuthenticationResponse we want to make assertions on.
   */
  protected AbstractAuthenticationResponseAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual AuthenticationResponse's accessToken is equal to the given one.
   * @param accessToken the given accessToken to compare the actual AuthenticationResponse's accessToken to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AuthenticationResponse's accessToken is not equal to the given one.
   */
  public S hasAccessToken(String accessToken) {
    // check that actual AuthenticationResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting accessToken of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualAccessToken = actual.getAccessToken();
    if (!Objects.areEqual(actualAccessToken, accessToken)) {
      failWithMessage(assertjErrorMessage, actual, accessToken, actualAccessToken);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual AuthenticationResponse's email is equal to the given one.
   * @param email the given email to compare the actual AuthenticationResponse's email to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AuthenticationResponse's email is not equal to the given one.
   */
  public S hasEmail(String email) {
    // check that actual AuthenticationResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting email of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualEmail = actual.getEmail();
    if (!Objects.areEqual(actualEmail, email)) {
      failWithMessage(assertjErrorMessage, actual, email, actualEmail);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual AuthenticationResponse's id is equal to the given one.
   * @param id the given id to compare the actual AuthenticationResponse's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AuthenticationResponse's id is not equal to the given one.
   */
  public S hasId(Long id) {
    // check that actual AuthenticationResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Long actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual AuthenticationResponse's refreshToken is equal to the given one.
   * @param refreshToken the given refreshToken to compare the actual AuthenticationResponse's refreshToken to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AuthenticationResponse's refreshToken is not equal to the given one.
   */
  public S hasRefreshToken(String refreshToken) {
    // check that actual AuthenticationResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting refreshToken of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualRefreshToken = actual.getRefreshToken();
    if (!Objects.areEqual(actualRefreshToken, refreshToken)) {
      failWithMessage(assertjErrorMessage, actual, refreshToken, actualRefreshToken);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual AuthenticationResponse's roles contains the given String elements.
   * @param roles the given elements that should be contained in actual AuthenticationResponse's roles.
   * @return this assertion object.
   * @throws AssertionError if the actual AuthenticationResponse's roles does not contain all given String elements.
   */
  public S hasRoles(String... roles) {
    // check that actual AuthenticationResponse we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (roles == null) failWithMessage("Expecting roles parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getRoles(), roles);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual AuthenticationResponse's roles contains the given String elements in Collection.
   * @param roles the given elements that should be contained in actual AuthenticationResponse's roles.
   * @return this assertion object.
   * @throws AssertionError if the actual AuthenticationResponse's roles does not contain all given String elements.
   */
  public S hasRoles(java.util.Collection<? extends String> roles) {
    // check that actual AuthenticationResponse we want to make assertions on is not null.
    isNotNull();

    // check that given String collection is not null.
    if (roles == null) {
      failWithMessage("Expecting roles parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getRoles(), roles.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual AuthenticationResponse's roles contains <b>only</b> the given String elements and nothing else in whatever order.
   * @param roles the given elements that should be contained in actual AuthenticationResponse's roles.
   * @return this assertion object.
   * @throws AssertionError if the actual AuthenticationResponse's roles does not contain all given String elements.
   */
  public S hasOnlyRoles(String... roles) {
    // check that actual AuthenticationResponse we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (roles == null) failWithMessage("Expecting roles parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getRoles(), roles);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual AuthenticationResponse's roles contains <b>only</b> the given String elements in Collection and nothing else in whatever order.
   * @param roles the given elements that should be contained in actual AuthenticationResponse's roles.
   * @return this assertion object.
   * @throws AssertionError if the actual AuthenticationResponse's roles does not contain all given String elements.
   */
  public S hasOnlyRoles(java.util.Collection<? extends String> roles) {
    // check that actual AuthenticationResponse we want to make assertions on is not null.
    isNotNull();

    // check that given String collection is not null.
    if (roles == null) {
      failWithMessage("Expecting roles parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getRoles(), roles.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual AuthenticationResponse's roles does not contain the given String elements.
   *
   * @param roles the given elements that should not be in actual AuthenticationResponse's roles.
   * @return this assertion object.
   * @throws AssertionError if the actual AuthenticationResponse's roles contains any given String elements.
   */
  public S doesNotHaveRoles(String... roles) {
    // check that actual AuthenticationResponse we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (roles == null) failWithMessage("Expecting roles parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getRoles(), roles);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual AuthenticationResponse's roles does not contain the given String elements in Collection.
   *
   * @param roles the given elements that should not be in actual AuthenticationResponse's roles.
   * @return this assertion object.
   * @throws AssertionError if the actual AuthenticationResponse's roles contains any given String elements.
   */
  public S doesNotHaveRoles(java.util.Collection<? extends String> roles) {
    // check that actual AuthenticationResponse we want to make assertions on is not null.
    isNotNull();

    // check that given String collection is not null.
    if (roles == null) {
      failWithMessage("Expecting roles parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getRoles(), roles.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual AuthenticationResponse has no roles.
   * @return this assertion object.
   * @throws AssertionError if the actual AuthenticationResponse's roles is not empty.
   */
  public S hasNoRoles() {
    // check that actual AuthenticationResponse we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have roles but had :\n  <%s>";

    // check
    if (actual.getRoles().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getRoles());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual AuthenticationResponse's tokenType is equal to the given one.
   * @param tokenType the given tokenType to compare the actual AuthenticationResponse's tokenType to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AuthenticationResponse's tokenType is not equal to the given one.
   */
  public S hasTokenType(String tokenType) {
    // check that actual AuthenticationResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting tokenType of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualTokenType = actual.getTokenType();
    if (!Objects.areEqual(actualTokenType, tokenType)) {
      failWithMessage(assertjErrorMessage, actual, tokenType, actualTokenType);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
