package localhost.client.model;

/**
 * {@link AuthenticationResponse} specific assertions - Generated by CustomAssertionGenerator.
 *
 * Although this class is not final to allow Soft assertions proxy, if you wish to extend it, 
 * extend {@link AbstractAuthenticationResponseAssert} instead.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class AuthenticationResponseAssert extends AbstractAuthenticationResponseAssert<AuthenticationResponseAssert, AuthenticationResponse> {

  /**
   * Creates a new <code>{@link AuthenticationResponseAssert}</code> to make assertions on actual AuthenticationResponse.
   * @param actual the AuthenticationResponse we want to make assertions on.
   */
  public AuthenticationResponseAssert(AuthenticationResponse actual) {
    super(actual, AuthenticationResponseAssert.class);
  }

  /**
   * An entry point for AuthenticationResponseAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myAuthenticationResponse)</code> and get specific assertion with code completion.
   * @param actual the AuthenticationResponse we want to make assertions on.
   * @return a new <code>{@link AuthenticationResponseAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static AuthenticationResponseAssert assertThat(AuthenticationResponse actual) {
    return new AuthenticationResponseAssert(actual);
  }
}
