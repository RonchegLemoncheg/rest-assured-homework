package localhost.client.model;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link RefreshTokenRequest} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractRefreshTokenRequestAssert<S extends AbstractRefreshTokenRequestAssert<S, A>, A extends RefreshTokenRequest> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractRefreshTokenRequestAssert}</code> to make assertions on actual RefreshTokenRequest.
   * @param actual the RefreshTokenRequest we want to make assertions on.
   */
  protected AbstractRefreshTokenRequestAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual RefreshTokenRequest's refreshToken is equal to the given one.
   * @param refreshToken the given refreshToken to compare the actual RefreshTokenRequest's refreshToken to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RefreshTokenRequest's refreshToken is not equal to the given one.
   */
  public S hasRefreshToken(String refreshToken) {
    // check that actual RefreshTokenRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting refreshToken of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualRefreshToken = actual.getRefreshToken();
    if (!Objects.areEqual(actualRefreshToken, refreshToken)) {
      failWithMessage(assertjErrorMessage, actual, refreshToken, actualRefreshToken);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
