package localhost.client.model;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link ProblemDetail} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractProblemDetailAssert<S extends AbstractProblemDetailAssert<S, A>, A extends ProblemDetail> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractProblemDetailAssert}</code> to make assertions on actual ProblemDetail.
   * @param actual the ProblemDetail we want to make assertions on.
   */
  protected AbstractProblemDetailAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual ProblemDetail's detail is equal to the given one.
   * @param detail the given detail to compare the actual ProblemDetail's detail to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProblemDetail's detail is not equal to the given one.
   */
  public S hasDetail(String detail) {
    // check that actual ProblemDetail we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting detail of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualDetail = actual.getDetail();
    if (!Objects.areEqual(actualDetail, detail)) {
      failWithMessage(assertjErrorMessage, actual, detail, actualDetail);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ProblemDetail's instance is equal to the given one.
   * @param instance the given instance to compare the actual ProblemDetail's instance to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProblemDetail's instance is not equal to the given one.
   */
  public S hasInstance(java.net.URI instance) {
    // check that actual ProblemDetail we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting instance of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.net.URI actualInstance = actual.getInstance();
    if (!Objects.areEqual(actualInstance, instance)) {
      failWithMessage(assertjErrorMessage, actual, instance, actualInstance);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ProblemDetail's properties is equal to the given one.
   * @param properties the given properties to compare the actual ProblemDetail's properties to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProblemDetail's properties is not equal to the given one.
   */
  public S hasProperties(java.util.Map properties) {
    // check that actual ProblemDetail we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting properties of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Map actualProperties = actual.getProperties();
    if (!Objects.areEqual(actualProperties, properties)) {
      failWithMessage(assertjErrorMessage, actual, properties, actualProperties);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ProblemDetail's status is equal to the given one.
   * @param status the given status to compare the actual ProblemDetail's status to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProblemDetail's status is not equal to the given one.
   */
  public S hasStatus(Integer status) {
    // check that actual ProblemDetail we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting status of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualStatus = actual.getStatus();
    if (!Objects.areEqual(actualStatus, status)) {
      failWithMessage(assertjErrorMessage, actual, status, actualStatus);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ProblemDetail's title is equal to the given one.
   * @param title the given title to compare the actual ProblemDetail's title to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProblemDetail's title is not equal to the given one.
   */
  public S hasTitle(String title) {
    // check that actual ProblemDetail we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting title of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualTitle = actual.getTitle();
    if (!Objects.areEqual(actualTitle, title)) {
      failWithMessage(assertjErrorMessage, actual, title, actualTitle);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ProblemDetail's type is equal to the given one.
   * @param type the given type to compare the actual ProblemDetail's type to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProblemDetail's type is not equal to the given one.
   */
  public S hasType(java.net.URI type) {
    // check that actual ProblemDetail we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting type of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.net.URI actualType = actual.getType();
    if (!Objects.areEqual(actualType, type)) {
      failWithMessage(assertjErrorMessage, actual, type, actualType);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
