package localhost.client.model;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link ContentDisposition} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractContentDispositionAssert<S extends AbstractContentDispositionAssert<S, A>, A extends ContentDisposition> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractContentDispositionAssert}</code> to make assertions on actual ContentDisposition.
   * @param actual the ContentDisposition we want to make assertions on.
   */
  protected AbstractContentDispositionAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual ContentDisposition's attachment is equal to the given one.
   * @param attachment the given attachment to compare the actual ContentDisposition's attachment to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ContentDisposition's attachment is not equal to the given one.
   */
  public S hasAttachment(Boolean attachment) {
    // check that actual ContentDisposition we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting attachment of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Boolean actualAttachment = actual.getAttachment();
    if (!Objects.areEqual(actualAttachment, attachment)) {
      failWithMessage(assertjErrorMessage, actual, attachment, actualAttachment);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ContentDisposition's charset is equal to the given one.
   * @param charset the given charset to compare the actual ContentDisposition's charset to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ContentDisposition's charset is not equal to the given one.
   */
  public S hasCharset(String charset) {
    // check that actual ContentDisposition we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting charset of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCharset = actual.getCharset();
    if (!Objects.areEqual(actualCharset, charset)) {
      failWithMessage(assertjErrorMessage, actual, charset, actualCharset);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ContentDisposition's creationDate is equal to the given one.
   * @param creationDate the given creationDate to compare the actual ContentDisposition's creationDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ContentDisposition's creationDate is not equal to the given one.
   */
  public S hasCreationDate(java.time.OffsetDateTime creationDate) {
    // check that actual ContentDisposition we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting creationDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.time.OffsetDateTime actualCreationDate = actual.getCreationDate();
    if (!Objects.areEqual(actualCreationDate, creationDate)) {
      failWithMessage(assertjErrorMessage, actual, creationDate, actualCreationDate);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ContentDisposition's filename is equal to the given one.
   * @param filename the given filename to compare the actual ContentDisposition's filename to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ContentDisposition's filename is not equal to the given one.
   */
  public S hasFilename(String filename) {
    // check that actual ContentDisposition we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting filename of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualFilename = actual.getFilename();
    if (!Objects.areEqual(actualFilename, filename)) {
      failWithMessage(assertjErrorMessage, actual, filename, actualFilename);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ContentDisposition's formData is equal to the given one.
   * @param formData the given formData to compare the actual ContentDisposition's formData to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ContentDisposition's formData is not equal to the given one.
   */
  public S hasFormData(Boolean formData) {
    // check that actual ContentDisposition we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting formData of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Boolean actualFormData = actual.getFormData();
    if (!Objects.areEqual(actualFormData, formData)) {
      failWithMessage(assertjErrorMessage, actual, formData, actualFormData);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ContentDisposition's inline is equal to the given one.
   * @param inline the given inline to compare the actual ContentDisposition's inline to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ContentDisposition's inline is not equal to the given one.
   */
  public S hasInline(Boolean inline) {
    // check that actual ContentDisposition we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting inline of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Boolean actualInline = actual.getInline();
    if (!Objects.areEqual(actualInline, inline)) {
      failWithMessage(assertjErrorMessage, actual, inline, actualInline);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ContentDisposition's modificationDate is equal to the given one.
   * @param modificationDate the given modificationDate to compare the actual ContentDisposition's modificationDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ContentDisposition's modificationDate is not equal to the given one.
   */
  public S hasModificationDate(java.time.OffsetDateTime modificationDate) {
    // check that actual ContentDisposition we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting modificationDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.time.OffsetDateTime actualModificationDate = actual.getModificationDate();
    if (!Objects.areEqual(actualModificationDate, modificationDate)) {
      failWithMessage(assertjErrorMessage, actual, modificationDate, actualModificationDate);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ContentDisposition's name is equal to the given one.
   * @param name the given name to compare the actual ContentDisposition's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ContentDisposition's name is not equal to the given one.
   */
  public S hasName(String name) {
    // check that actual ContentDisposition we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ContentDisposition's readDate is equal to the given one.
   * @param readDate the given readDate to compare the actual ContentDisposition's readDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ContentDisposition's readDate is not equal to the given one.
   */
  public S hasReadDate(java.time.OffsetDateTime readDate) {
    // check that actual ContentDisposition we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting readDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.time.OffsetDateTime actualReadDate = actual.getReadDate();
    if (!Objects.areEqual(actualReadDate, readDate)) {
      failWithMessage(assertjErrorMessage, actual, readDate, actualReadDate);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ContentDisposition's size is equal to the given one.
   * @param size the given size to compare the actual ContentDisposition's size to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ContentDisposition's size is not equal to the given one.
   */
  public S hasSize(Long size) {
    // check that actual ContentDisposition we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting size of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Long actualSize = actual.getSize();
    if (!Objects.areEqual(actualSize, size)) {
      failWithMessage(assertjErrorMessage, actual, size, actualSize);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ContentDisposition's type is equal to the given one.
   * @param type the given type to compare the actual ContentDisposition's type to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ContentDisposition's type is not equal to the given one.
   */
  public S hasType(String type) {
    // check that actual ContentDisposition we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting type of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualType = actual.getType();
    if (!Objects.areEqual(actualType, type)) {
      failWithMessage(assertjErrorMessage, actual, type, actualType);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
