package localhost.client.model;

import org.assertj.core.api.AbstractComparableAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link RegisterRequest.RoleEnum} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractRegisterRequestRoleEnumAssert<S extends AbstractRegisterRequestRoleEnumAssert<S, A>, A extends RegisterRequest.RoleEnum> extends AbstractComparableAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractRegisterRequestRoleEnumAssert}</code> to make assertions on actual RegisterRequest.RoleEnum.
   * @param actual the RegisterRequest.RoleEnum we want to make assertions on.
   */
  protected AbstractRegisterRequestRoleEnumAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual RegisterRequest.RoleEnum's value is equal to the given one.
   * @param value the given value to compare the actual RegisterRequest.RoleEnum's value to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RegisterRequest.RoleEnum's value is not equal to the given one.
   */
  public S hasValue(String value) {
    // check that actual RegisterRequest.RoleEnum we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting value of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualValue = actual.getValue();
    if (!Objects.areEqual(actualValue, value)) {
      failWithMessage(assertjErrorMessage, actual, value, actualValue);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
