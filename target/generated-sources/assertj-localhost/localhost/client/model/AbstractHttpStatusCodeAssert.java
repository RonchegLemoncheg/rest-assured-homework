package localhost.client.model;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link HttpStatusCode} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractHttpStatusCodeAssert<S extends AbstractHttpStatusCodeAssert<S, A>, A extends HttpStatusCode> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractHttpStatusCodeAssert}</code> to make assertions on actual HttpStatusCode.
   * @param actual the HttpStatusCode we want to make assertions on.
   */
  protected AbstractHttpStatusCodeAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual HttpStatusCode's error is equal to the given one.
   * @param error the given error to compare the actual HttpStatusCode's error to.
   * @return this assertion object.
   * @throws AssertionError - if the actual HttpStatusCode's error is not equal to the given one.
   */
  public S hasError(Boolean error) {
    // check that actual HttpStatusCode we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting error of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Boolean actualError = actual.getError();
    if (!Objects.areEqual(actualError, error)) {
      failWithMessage(assertjErrorMessage, actual, error, actualError);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HttpStatusCode's is1xxInformational is equal to the given one.
   * @param is1xxInformational the given is1xxInformational to compare the actual HttpStatusCode's is1xxInformational to.
   * @return this assertion object.
   * @throws AssertionError - if the actual HttpStatusCode's is1xxInformational is not equal to the given one.
   */
  public S hasIs1xxInformational(Boolean is1xxInformational) {
    // check that actual HttpStatusCode we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting is1xxInformational of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Boolean actualIs1xxInformational = actual.getIs1xxInformational();
    if (!Objects.areEqual(actualIs1xxInformational, is1xxInformational)) {
      failWithMessage(assertjErrorMessage, actual, is1xxInformational, actualIs1xxInformational);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HttpStatusCode's is2xxSuccessful is equal to the given one.
   * @param is2xxSuccessful the given is2xxSuccessful to compare the actual HttpStatusCode's is2xxSuccessful to.
   * @return this assertion object.
   * @throws AssertionError - if the actual HttpStatusCode's is2xxSuccessful is not equal to the given one.
   */
  public S hasIs2xxSuccessful(Boolean is2xxSuccessful) {
    // check that actual HttpStatusCode we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting is2xxSuccessful of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Boolean actualIs2xxSuccessful = actual.getIs2xxSuccessful();
    if (!Objects.areEqual(actualIs2xxSuccessful, is2xxSuccessful)) {
      failWithMessage(assertjErrorMessage, actual, is2xxSuccessful, actualIs2xxSuccessful);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HttpStatusCode's is3xxRedirection is equal to the given one.
   * @param is3xxRedirection the given is3xxRedirection to compare the actual HttpStatusCode's is3xxRedirection to.
   * @return this assertion object.
   * @throws AssertionError - if the actual HttpStatusCode's is3xxRedirection is not equal to the given one.
   */
  public S hasIs3xxRedirection(Boolean is3xxRedirection) {
    // check that actual HttpStatusCode we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting is3xxRedirection of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Boolean actualIs3xxRedirection = actual.getIs3xxRedirection();
    if (!Objects.areEqual(actualIs3xxRedirection, is3xxRedirection)) {
      failWithMessage(assertjErrorMessage, actual, is3xxRedirection, actualIs3xxRedirection);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HttpStatusCode's is4xxClientError is equal to the given one.
   * @param is4xxClientError the given is4xxClientError to compare the actual HttpStatusCode's is4xxClientError to.
   * @return this assertion object.
   * @throws AssertionError - if the actual HttpStatusCode's is4xxClientError is not equal to the given one.
   */
  public S hasIs4xxClientError(Boolean is4xxClientError) {
    // check that actual HttpStatusCode we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting is4xxClientError of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Boolean actualIs4xxClientError = actual.getIs4xxClientError();
    if (!Objects.areEqual(actualIs4xxClientError, is4xxClientError)) {
      failWithMessage(assertjErrorMessage, actual, is4xxClientError, actualIs4xxClientError);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HttpStatusCode's is5xxServerError is equal to the given one.
   * @param is5xxServerError the given is5xxServerError to compare the actual HttpStatusCode's is5xxServerError to.
   * @return this assertion object.
   * @throws AssertionError - if the actual HttpStatusCode's is5xxServerError is not equal to the given one.
   */
  public S hasIs5xxServerError(Boolean is5xxServerError) {
    // check that actual HttpStatusCode we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting is5xxServerError of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Boolean actualIs5xxServerError = actual.getIs5xxServerError();
    if (!Objects.areEqual(actualIs5xxServerError, is5xxServerError)) {
      failWithMessage(assertjErrorMessage, actual, is5xxServerError, actualIs5xxServerError);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
