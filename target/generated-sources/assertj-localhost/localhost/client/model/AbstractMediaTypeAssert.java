package localhost.client.model;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.api.Assertions;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link MediaType} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractMediaTypeAssert<S extends AbstractMediaTypeAssert<S, A>, A extends MediaType> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractMediaTypeAssert}</code> to make assertions on actual MediaType.
   * @param actual the MediaType we want to make assertions on.
   */
  protected AbstractMediaTypeAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual MediaType's charset is equal to the given one.
   * @param charset the given charset to compare the actual MediaType's charset to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MediaType's charset is not equal to the given one.
   */
  public S hasCharset(String charset) {
    // check that actual MediaType we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting charset of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCharset = actual.getCharset();
    if (!Objects.areEqual(actualCharset, charset)) {
      failWithMessage(assertjErrorMessage, actual, charset, actualCharset);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual MediaType's concrete is equal to the given one.
   * @param concrete the given concrete to compare the actual MediaType's concrete to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MediaType's concrete is not equal to the given one.
   */
  public S hasConcrete(Boolean concrete) {
    // check that actual MediaType we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting concrete of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Boolean actualConcrete = actual.getConcrete();
    if (!Objects.areEqual(actualConcrete, concrete)) {
      failWithMessage(assertjErrorMessage, actual, concrete, actualConcrete);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual MediaType's parameters is equal to the given one.
   * @param parameters the given parameters to compare the actual MediaType's parameters to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MediaType's parameters is not equal to the given one.
   */
  public S hasParameters(java.util.Map parameters) {
    // check that actual MediaType we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting parameters of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Map actualParameters = actual.getParameters();
    if (!Objects.areEqual(actualParameters, parameters)) {
      failWithMessage(assertjErrorMessage, actual, parameters, actualParameters);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual MediaType's qualityValue is equal to the given one.
   * @param qualityValue the given qualityValue to compare the actual MediaType's qualityValue to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MediaType's qualityValue is not equal to the given one.
   */
  public S hasQualityValue(Double qualityValue) {
    // check that actual MediaType we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting qualityValue of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Double actualQualityValue = actual.getQualityValue();
    if (!Objects.areEqual(actualQualityValue, qualityValue)) {
      failWithMessage(assertjErrorMessage, actual, qualityValue, actualQualityValue);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual MediaType's qualityValue is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param qualityValue the value to compare the actual MediaType's qualityValue to.
   * @param assertjOffset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual MediaType's qualityValue is not close enough to the given value.
   */
  public S hasQualityValueCloseTo(Double qualityValue, Double assertjOffset) {
    // check that actual MediaType we want to make assertions on is not null.
    isNotNull();

    Double actualQualityValue = actual.getQualityValue();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting qualityValue:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualQualityValue, qualityValue, assertjOffset, Math.abs(qualityValue - actualQualityValue));

    // check
    Assertions.assertThat(actualQualityValue).overridingErrorMessage(assertjErrorMessage).isCloseTo(qualityValue, Assertions.within(assertjOffset));

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual MediaType's subtype is equal to the given one.
   * @param subtype the given subtype to compare the actual MediaType's subtype to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MediaType's subtype is not equal to the given one.
   */
  public S hasSubtype(String subtype) {
    // check that actual MediaType we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting subtype of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualSubtype = actual.getSubtype();
    if (!Objects.areEqual(actualSubtype, subtype)) {
      failWithMessage(assertjErrorMessage, actual, subtype, actualSubtype);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual MediaType's subtypeSuffix is equal to the given one.
   * @param subtypeSuffix the given subtypeSuffix to compare the actual MediaType's subtypeSuffix to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MediaType's subtypeSuffix is not equal to the given one.
   */
  public S hasSubtypeSuffix(String subtypeSuffix) {
    // check that actual MediaType we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting subtypeSuffix of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualSubtypeSuffix = actual.getSubtypeSuffix();
    if (!Objects.areEqual(actualSubtypeSuffix, subtypeSuffix)) {
      failWithMessage(assertjErrorMessage, actual, subtypeSuffix, actualSubtypeSuffix);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual MediaType's type is equal to the given one.
   * @param type the given type to compare the actual MediaType's type to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MediaType's type is not equal to the given one.
   */
  public S hasType(String type) {
    // check that actual MediaType we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting type of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualType = actual.getType();
    if (!Objects.areEqual(actualType, type)) {
      failWithMessage(assertjErrorMessage, actual, type, actualType);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual MediaType's wildcardSubtype is equal to the given one.
   * @param wildcardSubtype the given wildcardSubtype to compare the actual MediaType's wildcardSubtype to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MediaType's wildcardSubtype is not equal to the given one.
   */
  public S hasWildcardSubtype(Boolean wildcardSubtype) {
    // check that actual MediaType we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting wildcardSubtype of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Boolean actualWildcardSubtype = actual.getWildcardSubtype();
    if (!Objects.areEqual(actualWildcardSubtype, wildcardSubtype)) {
      failWithMessage(assertjErrorMessage, actual, wildcardSubtype, actualWildcardSubtype);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual MediaType's wildcardType is equal to the given one.
   * @param wildcardType the given wildcardType to compare the actual MediaType's wildcardType to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MediaType's wildcardType is not equal to the given one.
   */
  public S hasWildcardType(Boolean wildcardType) {
    // check that actual MediaType we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting wildcardType of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Boolean actualWildcardType = actual.getWildcardType();
    if (!Objects.areEqual(actualWildcardType, wildcardType)) {
      failWithMessage(assertjErrorMessage, actual, wildcardType, actualWildcardType);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
