package localhost.client.model;

/**
 * {@link SayHelloWithRoleUserAndUpdateAuthority400Response} specific assertions - Generated by CustomAssertionGenerator.
 *
 * Although this class is not final to allow Soft assertions proxy, if you wish to extend it, 
 * extend {@link AbstractSayHelloWithRoleUserAndUpdateAuthority400ResponseAssert} instead.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class SayHelloWithRoleUserAndUpdateAuthority400ResponseAssert extends AbstractSayHelloWithRoleUserAndUpdateAuthority400ResponseAssert<SayHelloWithRoleUserAndUpdateAuthority400ResponseAssert, SayHelloWithRoleUserAndUpdateAuthority400Response> {

  /**
   * Creates a new <code>{@link SayHelloWithRoleUserAndUpdateAuthority400ResponseAssert}</code> to make assertions on actual SayHelloWithRoleUserAndUpdateAuthority400Response.
   * @param actual the SayHelloWithRoleUserAndUpdateAuthority400Response we want to make assertions on.
   */
  public SayHelloWithRoleUserAndUpdateAuthority400ResponseAssert(SayHelloWithRoleUserAndUpdateAuthority400Response actual) {
    super(actual, SayHelloWithRoleUserAndUpdateAuthority400ResponseAssert.class);
  }

  /**
   * An entry point for SayHelloWithRoleUserAndUpdateAuthority400ResponseAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(mySayHelloWithRoleUserAndUpdateAuthority400Response)</code> and get specific assertion with code completion.
   * @param actual the SayHelloWithRoleUserAndUpdateAuthority400Response we want to make assertions on.
   * @return a new <code>{@link SayHelloWithRoleUserAndUpdateAuthority400ResponseAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static SayHelloWithRoleUserAndUpdateAuthority400ResponseAssert assertThat(SayHelloWithRoleUserAndUpdateAuthority400Response actual) {
    return new SayHelloWithRoleUserAndUpdateAuthority400ResponseAssert(actual);
  }
}
