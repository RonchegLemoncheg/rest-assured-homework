/*
 * Spring Security 6+ APP
 * Spring Boot 3+ Spring Security 6+ example
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package localhost.client.api;

import localhost.client.model.AuthenticationRequest;
import localhost.client.model.AuthenticationResponse;
import localhost.client.model.ErrorResponse;
import localhost.client.model.RefreshTokenRequest;
import localhost.client.model.RefreshTokenResponse;
import localhost.client.model.RegisterRequest;
import localhost.client.model.SayHelloWithRoleUserAndUpdateAuthority400Response;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.common.mapper.TypeRef;
import io.restassured.http.Method;
import io.restassured.response.Response;


import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import static io.restassured.http.Method.*;

public class AuthenticationApi {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private AuthenticationApi(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static AuthenticationApi authentication(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new AuthenticationApi(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                authenticate(),
                getAuthentication(),
                logout(),
                refreshToken(),
                refreshTokenCookie(),
                register()
        );
    }

    public AuthenticateOper authenticate() {
        return new AuthenticateOper(createReqSpec());
    }

    public GetAuthenticationOper getAuthentication() {
        return new GetAuthenticationOper(createReqSpec());
    }

    public LogoutOper logout() {
        return new LogoutOper(createReqSpec());
    }

    public RefreshTokenOper refreshToken() {
        return new RefreshTokenOper(createReqSpec());
    }

    public RefreshTokenCookieOper refreshTokenCookie() {
        return new RefreshTokenCookieOper(createReqSpec());
    }

    public RegisterOper register() {
        return new RegisterOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public AuthenticationApi reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * 
     * 
     *
     * @see #body  (required)
     * return AuthenticationResponse
     */
    public static class AuthenticateOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/api/v1/auth/authenticate";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public AuthenticateOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("*/*,application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /api/v1/auth/authenticate
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /api/v1/auth/authenticate
         * @param handler handler
         * @return AuthenticationResponse
         */
        public AuthenticationResponse executeAs(Function<Response, Response> handler) {
            TypeRef<AuthenticationResponse> type = new TypeRef<AuthenticationResponse>(){};
            return execute(handler).as(type);
        }

         /**
         * @param authenticationRequest (AuthenticationRequest)  (required)
         * @return operation
         */
        public AuthenticateOper body(AuthenticationRequest authenticationRequest) {
            reqSpec.setBody(authenticationRequest);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public AuthenticateOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public AuthenticateOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #requestQuery  (required)
     */
    public static class GetAuthenticationOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/api/v1/auth/info";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetAuthenticationOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /api/v1/auth/info
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String REQUEST_QUERY = "request";

        /**
         * @param request (AuthenticationRequest)  (required)
         * @return operation
         */
        public GetAuthenticationOper requestQuery(Object... request) {
            reqSpec.addQueryParam(REQUEST_QUERY, request);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetAuthenticationOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetAuthenticationOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     */
    public static class LogoutOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/api/v1/auth/logout";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public LogoutOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /api/v1/auth/logout
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public LogoutOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public LogoutOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #body  (required)
     * return RefreshTokenResponse
     */
    public static class RefreshTokenOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/api/v1/auth/refresh-token";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public RefreshTokenOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /api/v1/auth/refresh-token
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /api/v1/auth/refresh-token
         * @param handler handler
         * @return RefreshTokenResponse
         */
        public RefreshTokenResponse executeAs(Function<Response, Response> handler) {
            TypeRef<RefreshTokenResponse> type = new TypeRef<RefreshTokenResponse>(){};
            return execute(handler).as(type);
        }

         /**
         * @param refreshTokenRequest (RefreshTokenRequest)  (required)
         * @return operation
         */
        public RefreshTokenOper body(RefreshTokenRequest refreshTokenRequest) {
            reqSpec.setBody(refreshTokenRequest);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public RefreshTokenOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public RefreshTokenOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     */
    public static class RefreshTokenCookieOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/api/v1/auth/refresh-token-cookie";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public RefreshTokenCookieOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /api/v1/auth/refresh-token-cookie
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public RefreshTokenCookieOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public RefreshTokenCookieOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #body  (required)
     * return AuthenticationResponse
     */
    public static class RegisterOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/api/v1/auth/register";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public RegisterOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /api/v1/auth/register
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /api/v1/auth/register
         * @param handler handler
         * @return AuthenticationResponse
         */
        public AuthenticationResponse executeAs(Function<Response, Response> handler) {
            TypeRef<AuthenticationResponse> type = new TypeRef<AuthenticationResponse>(){};
            return execute(handler).as(type);
        }

         /**
         * @param registerRequest (RegisterRequest)  (required)
         * @return operation
         */
        public RegisterOper body(RegisterRequest registerRequest) {
            reqSpec.setBody(registerRequest);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public RegisterOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public RegisterOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}
