/*
 * Spring Security 6+ APP
 * Spring Boot 3+ Spring Security 6+ example
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package localhost.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * MediaType
 */
@JsonPropertyOrder({
  MediaType.JSON_PROPERTY_TYPE,
  MediaType.JSON_PROPERTY_SUBTYPE,
  MediaType.JSON_PROPERTY_PARAMETERS,
  MediaType.JSON_PROPERTY_QUALITY_VALUE,
  MediaType.JSON_PROPERTY_CHARSET,
  MediaType.JSON_PROPERTY_CONCRETE,
  MediaType.JSON_PROPERTY_WILDCARD_SUBTYPE,
  MediaType.JSON_PROPERTY_WILDCARD_TYPE,
  MediaType.JSON_PROPERTY_SUBTYPE_SUFFIX
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-28T12:48:20.235073900+04:00[Asia/Dubai]", comments = "Generator version: 7.11.0")
public class MediaType {
  public static final String JSON_PROPERTY_TYPE = "type";
  @jakarta.annotation.Nullable
  private String type;

  public static final String JSON_PROPERTY_SUBTYPE = "subtype";
  @jakarta.annotation.Nullable
  private String subtype;

  public static final String JSON_PROPERTY_PARAMETERS = "parameters";
  @jakarta.annotation.Nullable
  private Map<String, String> parameters = new HashMap<>();

  public static final String JSON_PROPERTY_QUALITY_VALUE = "qualityValue";
  @jakarta.annotation.Nullable
  private Double qualityValue;

  public static final String JSON_PROPERTY_CHARSET = "charset";
  @jakarta.annotation.Nullable
  private String charset;

  public static final String JSON_PROPERTY_CONCRETE = "concrete";
  @jakarta.annotation.Nullable
  private Boolean concrete;

  public static final String JSON_PROPERTY_WILDCARD_SUBTYPE = "wildcardSubtype";
  @jakarta.annotation.Nullable
  private Boolean wildcardSubtype;

  public static final String JSON_PROPERTY_WILDCARD_TYPE = "wildcardType";
  @jakarta.annotation.Nullable
  private Boolean wildcardType;

  public static final String JSON_PROPERTY_SUBTYPE_SUFFIX = "subtypeSuffix";
  @jakarta.annotation.Nullable
  private String subtypeSuffix;

  public MediaType() {
  }

  public MediaType type(@jakarta.annotation.Nullable String type) {
    
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(@jakarta.annotation.Nullable String type) {
    this.type = type;
  }

  public MediaType subtype(@jakarta.annotation.Nullable String subtype) {
    
    this.subtype = subtype;
    return this;
  }

  /**
   * Get subtype
   * @return subtype
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBTYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSubtype() {
    return subtype;
  }


  @JsonProperty(JSON_PROPERTY_SUBTYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubtype(@jakarta.annotation.Nullable String subtype) {
    this.subtype = subtype;
  }

  public MediaType parameters(@jakarta.annotation.Nullable Map<String, String> parameters) {
    
    this.parameters = parameters;
    return this;
  }

  public MediaType putParametersItem(String key, String parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getParameters() {
    return parameters;
  }


  @JsonProperty(JSON_PROPERTY_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParameters(@jakarta.annotation.Nullable Map<String, String> parameters) {
    this.parameters = parameters;
  }

  public MediaType qualityValue(@jakarta.annotation.Nullable Double qualityValue) {
    
    this.qualityValue = qualityValue;
    return this;
  }

  /**
   * Get qualityValue
   * @return qualityValue
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUALITY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getQualityValue() {
    return qualityValue;
  }


  @JsonProperty(JSON_PROPERTY_QUALITY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQualityValue(@jakarta.annotation.Nullable Double qualityValue) {
    this.qualityValue = qualityValue;
  }

  public MediaType charset(@jakarta.annotation.Nullable String charset) {
    
    this.charset = charset;
    return this;
  }

  /**
   * Get charset
   * @return charset
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CHARSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCharset() {
    return charset;
  }


  @JsonProperty(JSON_PROPERTY_CHARSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCharset(@jakarta.annotation.Nullable String charset) {
    this.charset = charset;
  }

  public MediaType concrete(@jakarta.annotation.Nullable Boolean concrete) {
    
    this.concrete = concrete;
    return this;
  }

  /**
   * Get concrete
   * @return concrete
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONCRETE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getConcrete() {
    return concrete;
  }


  @JsonProperty(JSON_PROPERTY_CONCRETE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConcrete(@jakarta.annotation.Nullable Boolean concrete) {
    this.concrete = concrete;
  }

  public MediaType wildcardSubtype(@jakarta.annotation.Nullable Boolean wildcardSubtype) {
    
    this.wildcardSubtype = wildcardSubtype;
    return this;
  }

  /**
   * Get wildcardSubtype
   * @return wildcardSubtype
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WILDCARD_SUBTYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getWildcardSubtype() {
    return wildcardSubtype;
  }


  @JsonProperty(JSON_PROPERTY_WILDCARD_SUBTYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWildcardSubtype(@jakarta.annotation.Nullable Boolean wildcardSubtype) {
    this.wildcardSubtype = wildcardSubtype;
  }

  public MediaType wildcardType(@jakarta.annotation.Nullable Boolean wildcardType) {
    
    this.wildcardType = wildcardType;
    return this;
  }

  /**
   * Get wildcardType
   * @return wildcardType
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WILDCARD_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getWildcardType() {
    return wildcardType;
  }


  @JsonProperty(JSON_PROPERTY_WILDCARD_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWildcardType(@jakarta.annotation.Nullable Boolean wildcardType) {
    this.wildcardType = wildcardType;
  }

  public MediaType subtypeSuffix(@jakarta.annotation.Nullable String subtypeSuffix) {
    
    this.subtypeSuffix = subtypeSuffix;
    return this;
  }

  /**
   * Get subtypeSuffix
   * @return subtypeSuffix
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBTYPE_SUFFIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSubtypeSuffix() {
    return subtypeSuffix;
  }


  @JsonProperty(JSON_PROPERTY_SUBTYPE_SUFFIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubtypeSuffix(@jakarta.annotation.Nullable String subtypeSuffix) {
    this.subtypeSuffix = subtypeSuffix;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MediaType mediaType = (MediaType) o;
    return Objects.equals(this.type, mediaType.type) &&
        Objects.equals(this.subtype, mediaType.subtype) &&
        Objects.equals(this.parameters, mediaType.parameters) &&
        Objects.equals(this.qualityValue, mediaType.qualityValue) &&
        Objects.equals(this.charset, mediaType.charset) &&
        Objects.equals(this.concrete, mediaType.concrete) &&
        Objects.equals(this.wildcardSubtype, mediaType.wildcardSubtype) &&
        Objects.equals(this.wildcardType, mediaType.wildcardType) &&
        Objects.equals(this.subtypeSuffix, mediaType.subtypeSuffix);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, subtype, parameters, qualityValue, charset, concrete, wildcardSubtype, wildcardType, subtypeSuffix);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MediaType {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    subtype: ").append(toIndentedString(subtype)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    qualityValue: ").append(toIndentedString(qualityValue)).append("\n");
    sb.append("    charset: ").append(toIndentedString(charset)).append("\n");
    sb.append("    concrete: ").append(toIndentedString(concrete)).append("\n");
    sb.append("    wildcardSubtype: ").append(toIndentedString(wildcardSubtype)).append("\n");
    sb.append("    wildcardType: ").append(toIndentedString(wildcardType)).append("\n");
    sb.append("    subtypeSuffix: ").append(toIndentedString(subtypeSuffix)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

