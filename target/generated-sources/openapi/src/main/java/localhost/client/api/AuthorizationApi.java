/*
 * Spring Security 6+ APP
 * Spring Boot 3+ Spring Security 6+ example
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package localhost.client.api;

import localhost.client.model.ErrorResponse;
import localhost.client.model.SayHelloWithRoleUserAndUpdateAuthority400Response;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.common.mapper.TypeRef;
import io.restassured.http.Method;
import io.restassured.response.Response;


import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import static io.restassured.http.Method.*;

public class AuthorizationApi {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private AuthorizationApi(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static AuthorizationApi authorization(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new AuthorizationApi(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                sayHelloWithRoleAdminAndDeleteAuthority(),
                sayHelloWithRoleAdminAndReadAuthority(),
                sayHelloWithRoleUserAndCreateAuthority(),
                sayHelloWithRoleUserAndUpdateAuthority()
        );
    }

    public SayHelloWithRoleAdminAndDeleteAuthorityOper sayHelloWithRoleAdminAndDeleteAuthority() {
        return new SayHelloWithRoleAdminAndDeleteAuthorityOper(createReqSpec());
    }

    public SayHelloWithRoleAdminAndReadAuthorityOper sayHelloWithRoleAdminAndReadAuthority() {
        return new SayHelloWithRoleAdminAndReadAuthorityOper(createReqSpec());
    }

    public SayHelloWithRoleUserAndCreateAuthorityOper sayHelloWithRoleUserAndCreateAuthority() {
        return new SayHelloWithRoleUserAndCreateAuthorityOper(createReqSpec());
    }

    public SayHelloWithRoleUserAndUpdateAuthorityOper sayHelloWithRoleUserAndUpdateAuthority() {
        return new SayHelloWithRoleUserAndUpdateAuthorityOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public AuthorizationApi reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * 
     * 
     *
     * return String
     */
    public static class SayHelloWithRoleAdminAndDeleteAuthorityOper implements Oper {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/api/v1/admin/resource";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public SayHelloWithRoleAdminAndDeleteAuthorityOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /api/v1/admin/resource
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * DELETE /api/v1/admin/resource
         * @param handler handler
         * @return String
         */
        public String executeAs(Function<Response, Response> handler) {
            TypeRef<String> type = new TypeRef<String>(){};
            return execute(handler).as(type);
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public SayHelloWithRoleAdminAndDeleteAuthorityOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public SayHelloWithRoleAdminAndDeleteAuthorityOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Hello secured endpoint
     * This endpoint require a valid JWT, ADMIN role with READ_PRIVILEGE
     *
     * return String
     */
    public static class SayHelloWithRoleAdminAndReadAuthorityOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/api/v1/admin/resource";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public SayHelloWithRoleAdminAndReadAuthorityOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /api/v1/admin/resource
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /api/v1/admin/resource
         * @param handler handler
         * @return String
         */
        public String executeAs(Function<Response, Response> handler) {
            TypeRef<String> type = new TypeRef<String>(){};
            return execute(handler).as(type);
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public SayHelloWithRoleAdminAndReadAuthorityOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public SayHelloWithRoleAdminAndReadAuthorityOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * return String
     */
    public static class SayHelloWithRoleUserAndCreateAuthorityOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/api/v1/user/resource";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public SayHelloWithRoleUserAndCreateAuthorityOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /api/v1/user/resource
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /api/v1/user/resource
         * @param handler handler
         * @return String
         */
        public String executeAs(Function<Response, Response> handler) {
            TypeRef<String> type = new TypeRef<String>(){};
            return execute(handler).as(type);
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public SayHelloWithRoleUserAndCreateAuthorityOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public SayHelloWithRoleUserAndCreateAuthorityOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * return String
     */
    public static class SayHelloWithRoleUserAndUpdateAuthorityOper implements Oper {

        public static final Method REQ_METHOD = PUT;
        public static final String REQ_URI = "/api/v1/user/resource";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public SayHelloWithRoleUserAndUpdateAuthorityOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PUT /api/v1/user/resource
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PUT /api/v1/user/resource
         * @param handler handler
         * @return String
         */
        public String executeAs(Function<Response, Response> handler) {
            TypeRef<String> type = new TypeRef<String>(){};
            return execute(handler).as(type);
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public SayHelloWithRoleUserAndUpdateAuthorityOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public SayHelloWithRoleUserAndUpdateAuthorityOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}
